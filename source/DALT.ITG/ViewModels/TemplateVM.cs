using System;
using System.Text;
using System.Collections.ObjectModel;
using System.Windows.Input;
using DALT.ITG.Shared.Core;
using DALT.ITG.Shared.Utilities;
using DALT.ITG.Models;

namespace DALT.ITG.ViewModels
{
    // might be able to make TemplatePages into models, provide access here, and
    // skip the TemplatePageVM class entirely
    public sealed class TemplateVM : ObservableObject
    {
        #region FIELDS
        
        private string _templateName;
        private string _templateOwner;

        private readonly string _templateDesignerVersion = "MedcinForm-V1.1"; // pull from application settings
        private readonly string _templateOwnerType = "System";    // pull from application settings

        // NOT IMPLEMENTED private string _templateId; // optional; generated by designer
        // NOT IMPLEMENTED private string _templateSId; // optional; origin unknown
        
        private ItemDataContainer _tabstripItemData = new ItemDataContainer();
        private ItemDataContainer _browseTreeItemData = new ItemDataContainer();

        private double _width;
        private double _height;
        private SizeConstraints _constraints;

        private bool _isBusy = false;
        private bool _isDirty = false;

        private TemplatePageVM _currentPage;
        private ObservableCollection<TemplatePageVM> _pages = new ObservableCollection<TemplatePageVM>();

        private TemplateItemVM _selectedItem;
        private ObservableCollection<TemplateItemVM> _selectedItems = new ObservableCollection<TemplateItemVM>();

        #endregion


        #region Commands

        public ICommand AddPageCommand { get; private set; }
        public ICommand RemovePageCommand { get; private set; }
        public ICommand AddItemCommand { get; private set; }
        public ICommand RemoveItemCommand { get; private set; }
        public ICommand SelectAllItemsCommand { get; private set; }
        public ICommand DeleteAllItemsCommand { get; private set; }
        public ICommand SaveCommand { get; private set; }
        public ICommand LoadCommand { get; private set; }
        public ICommand ImportCommand { get; private set; }
        public ICommand ExportCommand { get; private set; }

        #endregion


        #region Template Properties

        public string TemplateName
        {
            get { return _templateName; }
            set { SetProperty(ref _templateName, value); }
        }

        public string TemplateOwner
        {
            get { return _templateOwner; }
            set { SetProperty(ref _templateOwner, value); }
        }

        public double Width
        {
            get { return _width; }
            set
            {
                value.RoundToNearestWholeNumber();
                if (Constrained)
                    value.Constrain(_constraints.MinimumWidth, _constraints.MaximumWidth);
                SetProperty(ref _width, value);
            }
        }

        public double Height
        {
            get { return _height; }
            set
            {
                value.RoundToNearestWholeNumber();
                if (Constrained)
                    value.Constrain(_constraints.MinimumHeight, _constraints.MaximumHeight);
                SetProperty(ref _height, value);
            }
        }

        public ItemDataContainer TabstripItemData { get { return _tabstripItemData; } }

        public ItemDataContainer BrowseTreeItemData { get { return _browseTreeItemData; } }

        #endregion


        #region Non-Template Properties

        public bool IsBusy
        {
            get { return _isBusy; }
            set { SetProperty(ref _isBusy, value); }
        }
        public bool IsDirty
        {
            get { return _isDirty; }
            set { SetProperty(ref _isDirty, value); }
        }

        public ObservableCollection<TemplateItemVM> Items
        {
            get { return _currentPage.Items; }
        }

        public TemplateItemVM SelectedItem
        {
            get { return _selectedItem; }
            set { SetProperty(ref _selectedItem, value); }
        }

        public ObservableCollection<TemplateItemVM> SelectedItems
        {
            get { return _selectedItems; }
        }

        public bool Constrained { get; set; }

        #endregion


        #region Command Implementation  

        private void ExecuteAddPageCommand(object parameter)
        {
            _pages.Add((TemplatePageVM)parameter);
            IsDirty = true;
        }
        private bool CanExecuteAddPageCommand(object parameter)
        {
            if (parameter == null)
                return false;
            else
                return true;
        }

        private void ExecuteRemovePageCommand(object parameter)
        {
            _pages.Remove((TemplatePageVM)parameter);
            IsDirty = true;
        }
        private bool CanExecuteRemovePageCommand(object parameter)
        {
            if (parameter == null)
                return false;
            else
                return true;
        }

        private void ExecuteAddItemCommand(object parameter)
        {
            Items.Add((TemplateItemVM)parameter);
            IsDirty = true;
        }
        private bool CanExecuteAddItemCommand(object parameter)
        {
            if (_currentPage == null || parameter == null) 
                return false;
            else 
                return true;
        }

        private void ExecuteRemoveItemCommand(object parameter)
        {
            Items.Remove((TemplateItemVM)parameter);
            IsDirty = true;
        }
        private bool CanExecuteRemoveItemCommand(object parameter)
        {
            if (_currentPage == null || parameter == null)
                return false;
            else 
                return true;
        }

        private void ExecuteSelectAllItemsCommand(object parameter) 
        {
            foreach (TemplateItemVM item in Items)
                _selectItem(item);
        }
        private bool CanExecuteSelectAllItemsCommand(object parameter)
        { return (Items.Count != 0) ? true : false; }

        private void ExecuteDeleteAllItemsCommand(object parameter) 
        {
            Items.Clear();
            IsDirty = true;
        }
        private bool CanExecuteDeleteAllItemsCommand(object parameter)
        { return (Items.Count != 0) ? true : false; }

        private void ExecuteSaveCommand(object parameter) { IsDirty = false; }
        private bool CanExecuteSaveCommand(object parameter) { return true; }

        private void ExecuteLoadCommand(object parameter) { IsDirty = false; }
        private bool CanExecuteLoadCommand(object parameter) { return true; }

        private void ExecuteImportCommand(object parameter) { IsDirty = false; }
        private bool CanExecuteImportCommand(object parameter) { return true; }

        private void ExecuteExportCommand(object parameter) { IsDirty = false; }
        private bool CanExecuteExportCommand(object parameter) { return true; }

        #endregion


        #region Methods

        private void _selectItem(TemplateItemVM item)
        {
            if (!item.IsSelected)
                item.IsSelected = true;
            if (!SelectedItems.Contains(item))
                SelectedItems.Add(item);
        }

        private void _deselectItem(TemplateItemVM item)
        {
            if (item.IsSelected)
                item.IsSelected = false;
            if (SelectedItems.Contains(item))
                SelectedItems.Remove(item);
        }

        private void _addTemplatePage(TemplatePageVM page)
        { 
            _pages.Add(page); 
        }

        private void _removeTemplatePage(TemplatePageVM page) 
        {
            if (_pages.Contains(page))
                _pages.Remove(page);
        }

        private void _addTemplateItem(TemplateItemVM item) 
        {
            Items.Add(item);
        }

        private void _removeTemplateItem(TemplateItemVM item) 
        {
            if (Items.Contains(item))
                Items.Remove(item);
        }

        private void _save() { }
        private void _load() { }
        private void _import() { }
        private string _export() 
        {
            StringBuilder sb = new StringBuilder();

            // LINE 1
            sb.AppendLine(_templateDesignerVersion.QuoteWrap());
            
            // LINE 2
            sb.AppendLine(String.Format(
                "{0},{1},{2}",
                TemplateName.QuoteWrap(),
                TemplateOwner.QuoteWrap(),
                _templateOwnerType.QuoteWrap()));
            sb.Append(TemplateName.QuoteWrap() + ",");
            sb.Append(TemplateOwner.QuoteWrap() + ",");
            sb.AppendLine(_templateOwnerType.QuoteWrap());

            // LINE 3 - FORM
            sb.AppendLine(String.Format(
                "0,0,0,{0},{1},0,1048576,\"\",\"\",\"\"", Width, Height));

            // LINE 4 - TABSTRIP
            sb.AppendLine(String.Format(
                "{0},5,377,295,395,0,32,{1},{2},{3}",
                (_pages.Count - 1), // page 0 doesn't count
                PrefixContainer.DefaultString.QuoteWrap(),
                ("N=1|" + _tabstripItemData.Export(":")).QuoteWrap(),
                (":-2147483633:" + _getPageNames()).QuoteWrap()));

            // LINE 5 - BROWSETREE
            // FWST-PedsGeneral: 0,555,10,1065,610,0,4,"","N=2|I=F|S=F|B=T",""
            //sb.AppendLine(String.Format("");
            sb.AppendLine(String.Format(
                "0,{0},10,{1},610,0,4,\"\",{2},\"\"",
                (Width / 2),
                (Width - 10),
                _browseTreeItemData.Export().QuoteWrap()));

            return sb.ToString();
        }

        private string _getPageNames()
        {
            StringBuilder sb = new StringBuilder();
            foreach (TemplatePageVM page in _pages)
            {
                if (_pages.IndexOf(page) != 0)
                {
                    if (_pages.IndexOf(page) == _pages.Count - 1)
                        sb.Append(page.Name);
                    else
                        sb.Append(page.Name + "|");
                }
            }
            return sb.ToString();
        }

        #endregion


        #region Singleton Setup

        // Instance created when first accessed
        private static readonly TemplateVM _instance = new TemplateVM();

        // Provide access to the singleton instance
        public static TemplateVM Instance { get { return _instance; } }

        static TemplateVM() { }

        private TemplateVM()
            : base()
        {
            Init();
        }

        private void Init()
        {
            // apply a default size
            Width = 700;
            Height = 700;

            // apply size constraints
            _constraints = new SizeConstraints(600, 2000, 400, 3000);
            Constrained = true;

            // setup default ItemData
            // A: "N=1|L=V=13:DF=1:PS=1:TP=0:MR=F:BS=1:TWS=0:PB=3:NB=3:ROS=1:PL=0:FB=0:EM=0:CB=2"
            // T: "N=1|L=V=13:DF=1:PS=1:TP=0:MR=T:BS=0:TWS=0:PB=2:NB=0:ROS=1:PL=0:FB=0:EM=0:CB=2:HHL=F"
            //_tabstripItemData.Add(new ObjectIdOption("1"));

            // setup the pages
            _pages.Add(new TemplatePageVM("Resources", this)); // by default will be at index 0
            _pages.Add(new TemplatePageVM("Tab 1", this));
            _currentPage = _pages[1];

            // setup commands
        }

        #endregion
    }
}
